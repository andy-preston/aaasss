/var/tmp/demo.asm
=================
                      1     .device("AT Tiny 2313")
                      2
                      3     ; Poke inserts bytes directly into the object file
                      4
                      5     ; This odd number of bytes will be zero padded to word align
000000 01 02 03 04    6     .poke(1, 2, 3, 4, 5, 6, 7)
000002 05 06 07 00
000004 48 65 6C 6C    7     .poke("Hello there!")
000006 6F 20 74 68
000008 65 72 65 21
                      8
                      9     .include("poke1.js")

/var/tmp/poke1.js
=================
                      1 // It's OK to poke multiple times in a JavaScript file
                      2 const stuff = [1, 2, 3, 4];
                      3 label("firstPoke");
                      4 poke(...stuff);
                      5 label("secondPoke");
                      6 poke(...stuff);
00000A 01 02 03 04    7
00000C 01 02 03 04

/var/tmp/demo.asm
=================
                     10     .include("poke2.js")

/var/tmp/poke2.js
=================
                      1 // Sorry, Any errors will be reported on the whole file
                      2 const stuff = [1, 2, 3, 4];
                      3 poke(stuff);
                      4 poke(...stuff);
00000E 00 00 01 02    5
000010 03 04            value_type
                        location.parameter: 1
                        expected: string, byte
                        actual: array: (1,2,3,4)

/var/tmp/demo.asm
=================
                     11
                     12     ; You can put a label on your data
000011 FF 00         13 here: .poke(0xff)
                     14

Symbol Table
============

firstPoke  | 10 | 0A | /var/tmp/poke1.js:7  | 0
here       | 17 | 11 | /var/tmp/demo.asm:13 | 0
secondPoke | 12 | 0C | /var/tmp/poke1.js:7  | 0